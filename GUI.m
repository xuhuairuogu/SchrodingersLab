function fig_hdl = GUI
% GUI              

% Initialize handles structure
handles = struct();

% Create all UI controls
build_gui();

% Load preferences
if exist('pref.mat', 'file') == 2
    load('pref.mat', 'pref');
else
    createDefaultPref();
    load('pref.mat', 'pref');
end
handles.pref = pref; 

% Assign function output
fig_hdl = handles.main_GUI;

%% ---- UI CONTROL CREATION --------------------------------------
function build_gui()
    %% --- FIGURE ----------------------------------------
    handles.main_GUI = figure( ...
        'Tag', 'main_GUI', ...
        'Units', 'normalized', ...
        'Position', [0.025 0.1 0.95 0.8], ... 
        'Name', 'Rogue Lab', ...
        'MenuBar', 'none', ...
        'NumberTitle', 'off', ...
        'Color', get(0,'DefaultUicontrolBackgroundColor'), ...
        'Resize', 'on');

    %% --- FILE MENU -------------------------------------
    handles.fileMenu = uimenu( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'fileMenu', ...
        'Label', 'File', ...
        'Checked', 'off');
    %=========================================
    handles.exportDataMenu = uimenu( ...
        'Parent', handles.fileMenu, ...
        'Tag', 'exportDataMenu', ...
        'Label', 'Expot Data', ...
        'Checked', 'off');
    %=========================================
    handles.numExportMenu = uimenu( ...
        'Parent', handles.exportDataMenu, ...
        'Tag', 'numExportMenu', ...
        'Label', 'Numerical', ...
        'Checked', 'off', ...
        'Callback', @numExportMenu_Callback);
    handles.analExportMenu = uimenu( ...
        'Parent', handles.exportDataMenu, ...
        'Tag', 'analExportMenu', ...
        'Label', 'Analytical', ...
        'Checked', 'off', ...
        'Callback', @analExportMenu_Callback);
     %=========================================
     
    %% --- VIEW MENU -------------------------------------
    handles.viewMenu = uimenu( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'viewMenu', ...
        'Label', 'View', ...
        'Checked', 'off');
    %=========================================
    handles.analParamView = uimenu( ...
        'Parent', handles.viewMenu, ...
        'Tag', 'analParamView', ...
        'Label', 'Analytical Parameters', ...
        'Checked', 'off', ...
        'Callback', @analParamView_Callback);
    %=========================================
        
    %% --- EDIT MENU -------------------------------------
    handles.editMenu = uimenu( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'editMenu', ...
        'Label', 'Edit', ...
        'Checked', 'off');
    %=========================================
    handles.menuPreferences = uimenu( ...
        'Parent', handles.editMenu, ...
        'Tag', 'menuPreferences', ...
        'Label', 'Preferences', ...
        'Checked', 'off', ...
        'Callback', @menuPreferences_Callback);
    %=========================================

    %% --- SIMULATION PANEL ------------------------------
    handles.simPanel = uipanel( ... 
        'Parent', handles.main_GUI, ...
        'Tag', 'simPanel', ...
        'Units', 'normalized', ...
        'Position', [0.02 0.38 0.35 0.59], ...
        'FontSize', 10, ...
        'Title', 'Simulation', ...
        'ShadowColor', [0.7 0.7 0.7]);
    %=========================================
    handles.potPanel = uipanel( ...
        'Parent', handles.simPanel, ...
        'Tag', 'potPanel', ...
        'Units', 'normalized', ...
        'Position', [0.04 0.43 0.41 0.13], ...
        'FontSize', 10, ...
        'Title', 'Potential', ...
        'ShadowColor', [0.7 0.7 0.7]);
    handles.potEdit = uicontrol( ...
        'Parent', handles.potPanel, ...
        'Tag', 'potEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.67 0.35 0.30 0.40], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '-1');
    handles.potMenu = uicontrol( ...
        'Parent', handles.potPanel, ...
        'Tag', 'potMenu', ...
        'Style', 'popupmenu', ...
        'Units', 'normalized', ...
        'Position', [0.04 0.14 0.56 0.67], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', {'g*|psi|^2 (cubic)','alpha*x^2 (parabolic)'}, ...
        'Callback', @potMenu_Callback);
    %=========================================
    handles.algPanel = uipanel( ...
        'Parent', handles.simPanel, ...
        'Tag', 'algPanel', ...
        'UserData', zeros(1,0), ...
        'Units', 'normalized', ...
        'Position', [0.50 0.87 0.25 0.11], ...
        'FontSize', 10, ...
        'Title', 'Algorithm', ...
        'ShadowColor', [0.7 0.7 0.7]);
    handles.algBox = uicontrol( ...
        'Parent', handles.algPanel, ...
        'Tag', 'algBox', ...
        'Value', 2, ...
        'UserData', zeros(1,0), ...
        'Style', 'popupmenu', ...
        'Units', 'normalized', ...
        'Position', [0.06 0.28 0.91 0.49], ...
        'BackgroundColor', [1 1 1], ...
        'String', {'First Order','Second Order','Fourth Order (S)','Fourth Order (M)','Sixth Order (S)','Sixth Order (M)','Eighth Order (S)','Eighth Order (M)'});
    %=========================================
    handles.gridPanel = uipanel( ...
        'Parent', handles.simPanel, ...
        'Tag', 'gridPanel', ...
        'UserData', zeros(1,0), ...
        'Units', 'normalized', ...
        'Position', [0.04 0.56 0.41 0.41], ...
        'FontSize', 10, ...
        'Title', 'Grid', ...
        'ShadowColor', [0.7 0.7 0.7]);
        %=========================================
        handles.ntLabel_lx = uicontrol( ...
            'Parent', handles.gridPanel, ...
            'Tag', 'ntLabel_lx', ...
            'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.64 0.44 0.11], ...
            'String', '$N_t$', ...
            'HorizontalAlignment', 'left');
        handles.NtEdit = uicontrol( ...
            'Parent', handles.gridPanel, ...
            'Tag', 'NtEdit', ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [0.67 0.64 0.29 0.11], ...
            'BackgroundColor', [1 1 1], ...
            'String', '256');
        %=========================================
        handles.dxEdit = uicontrol( ...
            'Parent', handles.gridPanel, ...
            'Tag', 'dxEdit', ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [0.67 0.80 0.29 0.11], ...
            'BackgroundColor', [1 1 1], ...
            'String', '0.001');
        handles.dxLabel_lx = uicontrol( ...
            'Parent', handles.gridPanel, ...
            'Tag', 'dxLabel_lx', ...
            'UserData', zeros(1,0), ...
            'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.80 0.44 0.11], ...
            'String', '$\Delta x$', ...
            'HorizontalAlignment', 'left');
        %=========================================
        handles.xfEdit = uicontrol( ...
            'Parent', handles.gridPanel, ...
            'Tag', 'xfEdit', ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [0.67 0.48 0.29 0.11], ...
            'String', '20');
        handles.xfLabel_lx = uicontrol( ...
            'Parent', handles.gridPanel, ...
            'Tag', 'xfLabel_lx', ...
            'Style', 'text', ...
            'Units', 'normalized', ...
            'Position', [0.05 0.48 0.44 0.11], ...
            'String', '$X_f$', ...
            'HorizontalAlignment', 'left');
        %=========================================
         handles.LButtonGroup = uibuttongroup( ...
            'Parent', handles.gridPanel, ...
            'Units', 'normalized', ...
            'Position',[0.04 0.05 0.93 0.41],...
            'Title', 'L');
        handles.LRadioButton = uicontrol( ...
            'Parent', handles.LButtonGroup, ...
            'Tag', 'LRadioButton', ...
            'UserData', zeros(1,0), ...
            'Style', 'radiobutton', ...
            'Units', 'normalized', ...
            'Position', [0.03 0.5 0.42 0.42], ...
            'FontSize', 9, ...
            'String', 'Manual', ...
            'Callback', @LRadioButton_Callback, ...
            'KeyPressFcn', @LRadioButton_KeyPressFcn);
        handles.aRadioButton = uicontrol( ...
            'Parent', handles.LButtonGroup, ...
            'Tag', 'aRadioButton', ...
            'Value', 1, ...
            'UserData', zeros(1,0), ...
            'Style', 'radiobutton', ...
            'Units', 'normalized', ...
            'Position', [0.03 0.12 0.54 0.42], ...
            'FontSize', 9, ...
            'String', 'Periodic. Multiple:', ...
            'Callback', @aRadioButton_Callback, ...
            'KeyPressFcn', @aRadioButton_KeyPressFcn);
        handles.aLMultEdit = uicontrol( ...
            'Parent', handles.LButtonGroup, ...
            'Tag', 'aLMultEdit', ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [0.65 0.18 0.29 0.29], ...
            'BackgroundColor', [1 1 1], ...
            'String', '1');
        handles.LEdit = uicontrol( ...
            'Parent', handles.LButtonGroup, ...
            'Tag', 'LEdit', ...
            'Style', 'edit', ...
            'Units', 'normalized', ...
            'Position', [0.65 0.57 0.29 0.29], ...
            'BackgroundColor', [1 1 1], ...
            'String', '20', ...
            'Enable', 'off');
    %=========================================
    handles.coeffTable = uitable( ...
        'Parent', handles.simPanel, ...
        'Tag', 'coeffTable', ...
        'UserData', zeros(1,0), ...
        'Units', 'normalized', ...
        'Position', [0.500749625187406 0.431899641577061 0.469265367316342 0.369175627240143], ...
        'BackgroundColor', [1 1 1;0.941 0.941 0.941], ...
        'ColumnEditable', [true,false], ...
        'ColumnFormat', {'short e',[]}, ...
        'ColumnName', '', ...
        'ColumnWidth', {171,1}, ...
        'Data', {;}, ...
        'RowName', {'A0','A1','A2','A3','A4','A5'});
    %=========================================
    handles.runButton = uicontrol( ...
        'Parent', handles.simPanel, ...
        'Tag', 'runButton', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.785607196401799 0.89426523297491 0.185907046476762 0.0519713261648745], ...
        'FontSize', 10, ...
        'String', 'Run', ...
        'Callback', @runButton_Callback);
    %=========================================
    handles.gridAxis = axes('parent',handles.gridPanel,'units','normalized','position',[0 0.06 1 1],'visible','off');
    % Find all static text UICONTROLS whose 'Tag' ends with '_lx'
    lbls = findobj(handles.gridPanel,'-regexp','tag','_lx*');
    for i=1:length(lbls)
        l = lbls(i);
        % Get current text, position and tag
        set(l,'units','normalized');
        s = get(l,'string');
        v = get(l, 'visible');
        p = get(l,'position');
        t = get(l,'tag');
        % Remove the UICONTROL
        delete(l);
        % Replace it with a TEXT object 
        handles.(t) = text(p(1),p(2),s,'interpreter','latex', 'visible', v);
    end
    %=========================================
    
    %% --- IC PANEL --------------------------------------
    handles.icPanel = uipanel( ...
        'Parent', handles.simPanel, ...
        'Tag', 'icPanel', ...
        'Units', 'normalized', ...
        'Position', [0.04 0.15 0.93 0.27], ...
        'FontSize', 10, ...
        'Title', 'Initial Condition', ...
        'ShadowColor', [0.7 0.7 0.7]);
    %=========================================
    handles.psi0EqLabel_lx = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'psi0EqLabel_lx', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.39 0.84 0.6 0.12], ...
        'FontSize', 10, ...
        'String', '$\psi_0 = DT(x=X,t)$', ...
        'HorizontalAlignment', 'left', ...
        'Callback', @psi0EqLabel_Callback);
    %=========================================
    handles.sHermBesLabel_lx = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'sHermBesLabel_lx', ...
        'UserData', zeros(1,0), ...
        'Visible', 'off', ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.60 0.57 0.03 0.15], ...
        'FontSize', 10, ...
        'String', '$s$', ...
        'HorizontalAlignment', 'left');
    handles.sHermBesEdit = uicontrol( ...
        'Parent', handles.icPanel', ...
        'Tag', 'sHermBesEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Visible', 'off', ...
        'Position', [0.66 0.57 0.07 0.17], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '-10');
    %=========================================
    handles.aAiryLabel_lx = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'aAiryLabel_lx', ...
        'UserData', zeros(1,0), ...
        'Visible', 'off', ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.38 0.57 0.03 0.17], ...
        'FontSize', 10, ...
        'String', '$a$', ...
        'HorizontalAlignment', 'left');
    handles.aAiryEdit = uicontrol( ...
        'Parent', handles.icPanel', ...
        'Tag', 'aAiryEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Visible', 'off', ...
        'Position', [0.47 0.57 0.09 0.17], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '0.1');
    %=========================================
    handles.nHermBesLabel_lx = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'nHermBesLabel_lx', ...
        'Visible', 'off', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.38 0.57 0.03 0.17], ...
        'FontSize', 10, ...
        'String', '$n$', ...
        'HorizontalAlignment', 'left');
    handles.nHermBesEdit = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'nHermBesEdit', ...
        'Style', 'edit', ...
        'Visible', 'off', ...
        'Units', 'normalized', ...
        'Position', [0.47 0.57 0.09 0.17], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '2');
    %=========================================
    handles.aManABLabel_lx = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'aManABLabel_lx', ...
        'Visible', 'off', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.38 0.57 0.03 0.17], ...
        'FontSize', 10, ...
        'String', '$a$', ...
        'HorizontalAlignment', 'left');
    handles.aManABEdit = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'aManABEdit', ...
        'Style', 'edit', ...
        'Visible', 'off', ...
        'Units', 'normalized', ...
        'Position', [0.47 0.57 0.09 0.17], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '0.43');
    %=========================================
    handles.approxAjCheck = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'approxAjCheck', ...
        'Style', 'checkbox', ...
        'Units', 'normalized', ...
        'Visible', 'off', ...
        'Position', [0.38 0.57 0.4 0.17], ...
        'String', 'Significant figures in A_j', ...
        'Callback', @approxAjCheck_Callback);
    handles.decimalsEdit = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'decimalsEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.7 0.57 0.12 0.17], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '4', ...
        'Visible', 'off', ...
        'Enable', 'off');
    %=========================================
    handles.psi0Listbox = uicontrol( ...
        'Parent', handles.icPanel, ...
        'Tag', 'psi0Listbox', ...
        'Style', 'listbox', ...
        'Units', 'normalized', ...
        'Position', [0.02 0.1 0.345 0.85], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', {'Pure DT', 'Cosine Series from DT','Manual Cosine Series','Hermite-Gauss beam','Bessel-Gauss beam','Finite energy Airy beam'}, ...
        'Callback', @psi0Listbox_Callback);
    %=========================================
    handles.icAxis = axes('parent',handles.icPanel,'units','normalized','position',[0 0.07 1 1],'visible','off');
    % Find all static text UICONTROLS whose 'Tag' ends with '_lx'
    lbls = findobj(handles.icPanel,'-regexp','tag','_lx*');
    for i=1:length(lbls)
        l = lbls(i);
        % Get current text, position and tag
        set(l,'units','normalized');
        s = get(l,'string');
        v = get(l, 'visible');
        p = get(l,'position');
        t = get(l,'tag');
        % Remove the UICONTROL
        delete(l);
        % Replace it with a TEXT object 
        handles.(t) = text(p(1),p(2),s,'interpreter','latex', 'visible', v);
    end
    %=========================================
    
    %% --- DT PANEL --------------------------------------
    handles.dtPanel = uipanel( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'dtPanel', ...
        'Units', 'normalized', ...
        'Position', [0.02 0.03 0.35 0.33], ...
        'Title', 'Darboux Transformation', ...
        'ShadowColor', [0.7 0.7 0.7]);
    %=========================================
    handles.xjLabel_lx = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'xjLabel_lx', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.35 0.58 0.05 0.12], ...
        'FontSize', 10, ...
        'String', '$x_j$', ...
        'HorizontalAlignment', 'left');
    handles.xjEdit = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'xjEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.41 0.58 0.21 0.12], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '[0, 0, 0, 0, 0]');
    %=========================================
    handles.tjLabel_lx = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'tjLabel_lx', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.03 0.58 0.05 0.12], ...
        'FontSize', 10, ...
        'String', '$t_j$', ...
        'HorizontalAlignment', 'left');
    handles.tjEdit = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'tjEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.12 0.58 0.21 0.12], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '[0, 0, 0, 0, 0]');
    %=========================================
    handles.aLabel_lx = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'aLabel_lx', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.35 0.85 0.03 0.12], ...
        'FontSize', 10, ...
        'String', '$a$', ...
        'HorizontalAlignment', 'left');
    handles.aEdit = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'aEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.41 0.85 0.21 0.12], ...
        'BackgroundColor', [1 1 1], ...
        'String', '0.43');
    %=========================================
    handles.phfLabel = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'phfLabel', ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.03 0.25 0.05 0.12], ...
        'FontSize', 9, ...
        'String', 'PHF:');
    handles.phfResultLabel = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'phfResultLabel', ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.12 0.25 0.21 0.12], ...
        'String', '-');
    %=========================================
    handles.kEllipLabel_lx = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'kEllipLabel_lx', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.35 0.42 0.05 0.12], ...
        'FontSize', 10, ...
        'String', '$k$', ...
        'HorizontalAlignment', 'left');       
    handles.kEllipEdit = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'kEllipEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.41 0.42 0.21 0.12], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '0.1', ...
        'Enable', 'off');
    %=========================================
    handles.xmaxLabel_lx = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'xmaxLabel_lx', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.21 0.85 0.0307443365695793 0.12], ...
        'FontSize', 10, ...
        'String', '$X$', ...
        'HorizontalAlignment', 'left');
    handles.xmaxEdit = uicontrol( ...
        'Parent', handles.dtPanel', ...
        'Tag', 'xmaxEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.25 0.85 0.0713128038897893 0.12], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '-10');
    %=========================================
    handles.ratioLabel = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'ratioLabel', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'FontSize', 10, ...
        'Position', [0.03 0.71 0.0760517799352751 0.12], ...
        'String', 'Ratio', ...
        'HorizontalAlignment', 'left');
    handles.ratioEdit = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'ratioEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.12 0.71 0.21 0.12], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '2');
    handles.ratioInfoLabel_lx = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'ratioInfoLabel_lx', ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.35 0.71 0.27 0.118556701030928], ...
        'FontSize', 10, ...
        'String', '$\Omega_m = R_{m-1}\Omega_1$', ...
        'TooltipString', 'Only usable when a is a scalar, this generates the remaining values of a.', ...
        'HorizontalAlignment', 'left');
    %=========================================
    handles.orderEdit = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'orderEdit', ...
        'Style', 'edit', ...
        'Units', 'normalized', ...
        'Position', [0.12 0.85 0.0713128038897893 0.120418848167539], ...
        'FontSize', 10, ...
        'BackgroundColor', [1 1 1], ...
        'String', '2');  
    handles.orderLabel = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'orderLabel', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.03 0.85 0.0760517799352751 0.118556701030928], ...
        'FontSize', 10, ...
        'String', 'Order', ...
        'HorizontalAlignment', 'left');
    %=========================================
    handles.seedMenu = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'seedMenu', ...
        'Style', 'popupmenu', ...
        'Units', 'normalized', ...
        'Position', [0.12 0.42 0.20127420775719 0.120436864153202], ...
        'BackgroundColor', [1 1 1], ...
        'String', {'Breather','Soliton','Cn','Dn'}, ...
        'Callback', @seedMenu_Callback);
    handles.seedLabel = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'seedLabel', ...
        'UserData', zeros(1,0), ...
        'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.03 0.42 0.0760517799352751 0.118556701030928], ...
        'FontSize', 9, ...
        'String', 'Seed', ...
        'HorizontalAlignment', 'left');
    %=========================================
    handles.runDTButton = uicontrol( ...
        'Parent', handles.dtPanel, ...
        'Tag', 'runDTButton', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.747163695299838 0.07 0.225283630470016 0.162303664921466], ...
        'String', 'Run DT', ...
        'Callback', @runDTButton_Callback);
    %=========================================
    handles.dtAxis = axes('parent',handles.dtPanel,'units','normalized','position',[0 0.06 1 1],'visible','off');
    % Find all static text UICONTROLS whose 'Tag' ends with '_lx'
    lbls = findobj(handles.dtPanel,'-regexp','tag','_lx*');
    for i=1:length(lbls)
        l = lbls(i);
        % Get current text, position and tag
        set(l,'units','normalized');
        s = get(l,'string');
        v = get(l, 'visible');
        p = get(l,'position');
        t = get(l,'tag');
        % Remove the UICONTROL
        delete(l);
        % Replace it with a TEXT object 
        handles.(t) = text(p(1),p(2),s,'interpreter','latex', 'visible', v);
    end

    %% --- DT REAL SPACE AXES ----------------------------
    handles.analRealAxes = axes( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'analRealAxes', ...
        'Units', 'normalized', ...
        'Position', [0.41 0.06 0.25 0.415]);
    % =========================================
    handles.undockRealDT = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'undockRealDT', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.67 0.45 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'U', ...
        'Callback', @undockRealDT_Callback);
    handles.switchRealDT = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'switchRealDT', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.67 0.41 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'S', ...
        'Callback', @switchRealDT_Callback);
    handles.maximaDT = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'maximaDT', ...
        'UserData', zeros(1,0), ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.67 0.37 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'M', ...
        'Callback', @maximaDT_Callback); 
    %=========================================
    
    %% --- DT INVERSE SPACE AXES -------------------------
    handles.analInvAxes = axes( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'analInvAxes', ...
        'Units', 'normalized', ...
        'Position', [0.715 0.06 0.25 0.415]);
    % =========================================
    handles.undockInvDT = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'undockInvDT', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.975 0.45 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'U', ...
        'Callback', @undockInvDT_Callback);
    handles.switchInvDT = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'switchInvDT', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.975 0.41 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'S', ...
        'Callback', @switchInvDT_Callback);
    %=========================================
    
    %% --- NUMERICAL REAL SPACE AXES ---------------------
    handles.numRealAxes = axes( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'numRealAxes', ...
        'Units', 'normalized', ...
        'Position', [0.41 0.56 0.25 0.415]);
    % =========================================
    handles.undockRealNum = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'undockRealNum', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.67 0.95 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'U', ...
        'Callback', @undockRealNum_Callback);
    handles.switchRealNum = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'switchRealNum', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.67 0.91 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'S', ...
        'Callback', @switchRealNum_Callback);
    handles.maximaNum = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'maximaNum', ...
        'UserData', zeros(1,0), ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.67 0.87 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'M', ...
        'Callback', @maximaNum_Callback);
    handles.energyNum = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'energyNum', ...
        'UserData', zeros(1,0), ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.67 0.83 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'E', ...
        'Callback', @energyNum_Callback);
    %=========================================
    
    %% --- NUMERICAL INVERSE SPACE AXES ------------------
    handles.numInvAxes = axes( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'numInvAxes', ...
        'Units', 'normalized', ...
        'Position', [0.715 0.56 0.25 0.415]);
    % =========================================
    handles.undockInvNum = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'undockInvNum', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.975 0.95 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'U', ...
        'Callback', @undockInvNum_Callback);
    handles.switchInvNum = uicontrol( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'switchInvNum', ...
        'Style', 'pushbutton', ...
        'Units', 'normalized', ...
        'Position', [0.975 0.91 0.013 0.025], ...
        'FontSize', 12, ...
        'FontWeight', 'bold', ...
        'String', 'S', ...
        'Callback', @switchInvNum_Callback);
    %=========================================
    
    %% --- TOOLBAR ---------------------------------------
    handles.uitoolbar = uitoolbar( ...
        'Parent', handles.main_GUI, ...
        'Tag', 'uitoolbar');

end

%% ---- CALL BACKS -----------------------------------------------
function analParamView_Callback(hObject,evendata)          %#ok<INUSD>
    analProp;
end

function analExportMenu_Callback(hObject,evendata)         %#ok<INUSD>
    k = any(strcmp('PSI_anal',fieldnames(handles))); % Check if numerical data exists in memory
    if ~k % If it doesn't, display error
        errordlg('No DT data exists in memory, nothing to export.');
    end
    PSI = handles.PSI_anal;
    x = handles.x_anal;
    t = handles.t_anal;
    exportData(PSI, x, t);
end

function menuPreferences_Callback(hObject,evendata)        %#ok<INUSD>
    uiwait(preferences);
    if exist('pref.mat', 'file') == 2
        load('pref.mat', 'pref');
    else
        createDefaultPref();
        load('pref.mat', 'pref');
    end
    handles.pref = pref;
end

function numExportMenu_Callback(hObject,evendata)          %#ok<INUSD>
    k = any(strcmp('PSI_num',fieldnames(handles))); % Check if numerical data exists in memory
    if ~k % If it doesn't, display error
        errordlg('No numerical data exists in memory, nothing to export.');
    end
    PSI = handles.PSI_num;
    x = handles.x_num;
    t = handles.t_num;
    exportData(PSI, x, t, handles);
end

function exportData(PSI, x, t)                                        
    defaultName = [datestr(date, 'yyyymmdd'), '.mat'];

    extensions = {'*.mat',...
     'MATLAB MAT file (*.mat)';
     '*.csv', 'Comma Separate Values (*.csv)';...
     '*.txt','Space-delimited TXT (*.txt)';...
     '*.*',  'All Files (*.*)'};

    [filename, pathname, index] = uiputfile(extensions, 'Save as', defaultName);

    if isequal(filename,0) || isequal(pathname,0) % Canceled
       return;
    else
       fullfile = [pathname, '\', filename];
       if index == 1 % mat
           save(fullfile, 'PSI', 'x', 't');
       elseif index == 2 %csv
           full = [[NaN, x']; t PSI];
           dlmwrite(fullfile,full,'delimiter',',','precision',handles.pref.dec)
       elseif index == 3 % space-delimited txt
           full = [[NaN, x']; t PSI];
           dlmwrite(fullfile,full,'delimiter',' ','precision',handles.pref.dec)
       else
           error('Cant save in this extensions');
       end
    end
end 

function undockRealNum_Callback(hObject,evendata)             %#ok<INUSD>
    f = figure;
    h = allchild(handles.numRealAxes);
    copyobj(handles.numRealAxes,f); colormap('jet'); colorbar;
    %title(' ');
    if (size(h) == 1); % Density Plot mode
        colorbar
        set(gca, 'Position', [0.1300    0.1100    0.7750    0.8150]);
    else
        colorbar off;
        set(gca, 'Position', [0.1300    0.1100    0.7750    0.8150]);
    end
end

function undockInvDT_Callback(hObject,evendata)              %#ok<INUSD>
    f = figure;
    leg = legend(handles.analInvAxes);
    if ~isempty(leg)
        copyobj([leg, handles.analInvAxes],f);
    else
        copyobj(handles.analInvAxes,f);
        colorbar; colormap('jet');
    end
    set(gca, 'Position', [0.1300    0.1100    0.7750    0.8150]);
end

function undockInvNum_Callback(hObject,evendata)             %#ok<INUSD>
    f = figure;
    leg = legend(handles.numInvAxes);
    if ~isempty(leg)
        copyobj([leg, handles.numInvAxes],f);
    else
        copyobj(handles.numInvAxes,f);
        colorbar; colormap('jet');
    end
    set(gca, 'Position', [0.1300    0.1100    0.7750    0.8150]);
end

function undockRealDT_Callback(hObject,evendata)              %#ok<INUSD>
    f = figure;
    h = allchild(handles.analRealAxes);
    copyobj(handles.analRealAxes,f); colormap('jet'); colorbar;
    %title(' ');
    if (size(h) == 1); % Density Plot mode
        colorbar
        set(gca, 'Position', [0.1300    0.1100    0.7750    0.8150]);
        %colormap(jet(256)); colorbar off; axis off; title(''); set(gca,'position',[0 0 1 1],'units','normalized'); caxis([0, 3])
    else
        colorbar off;
        set(gca, 'Position', [0.1300    0.1100    0.7750    0.8150]);
        colormap(jet(256));
    end
end

function switchRealDT_Callback(hObject,evendata)             %#ok<INUSD>
    pref = handles.pref;
    if ~isfield(handles, 'PSI_anal')
        return;
    end
    PSI = handles.PSI_anal;
    x = handles.x_anal;
    t = handles.t_anal;
    if strcmp(handles.analPlotMode, 'density'); % Axes are in density plot mode
        nlsePlot(abs(PSI).^pref.pwr, x, t, ceil(pref.Nt/500), ceil(pref.Nx/500), handles.analRealAxes, '3D');
        handles.analPlotMode = '3D';
    else
        nlsePlot(abs(PSI).^pref.pwr, x, t, ceil(pref.Nt/500), ceil(pref.Nx/500), handles.analRealAxes, 'density');
        handles.analPlotMode = 'density';
    end
    title(sprintf('Analytical. Max = %.3f', max(max(abs(PSI).^pref.pwr))));
    guidata(hObject, handles);
end

function switchRealNum_Callback(hObject,evendata)              %#ok<INUSD>
    pref = handles.pref;
    if ~isfield(handles, 'PSI_num')
        return;
    end
    PSI = handles.PSI_num;
    x = handles.x_num;
    t = handles.t_num;
    Nx = length(x);
    Nt = length(t);
    if strcmp(handles.numPlotMode, 'density'); % Axes are in density plot mode
        nlsePlot(abs(PSI).^pref.pwr, x, t, ceil(Nt/500), ceil(Nx/500), handles.numRealAxes, '3D');
        handles.numPlotMode = '3D';
    else
        nlsePlot(abs(PSI).^pref.pwr, x, t, ceil(Nt/500), ceil(Nx/500), handles.numRealAxes, 'density');
        handles.numPlotMode = 'density';
    end
    title(sprintf('Numerical. Max = %.3f', max(max(abs(PSI).^pref.pwr))));
    guidata(hObject, handles);
end

function switchInvNum_Callback(hObject,evendata)       %#ok<INUSD>
    pref = handles.pref;
    if ~isfield(handles, 'PSI_num')
        return;
    end
    PSI = handles.PSI_num;
    t = handles.t_num;
    k = handles.k_num;
    if strcmp(handles.numFourierPlotMode, 'lines'); % Axes are in density plot mode
        fourierPlot(PSI, t, k, pref.fourierLines, pref.aLMult, handles.numInvAxes, 'density');
        handles.numFourierPlotMode = 'density';
    else
        fourierPlot(PSI, t, k, pref.fourierLines, pref.aLMult, handles.numInvAxes, 'lines');
        handles.numFourierPlotMode = 'lines';
    end
    title('Numerical');
end

function switchInvDT_Callback(hObject,evendata)      %#ok<INUSD>
    pref = handles.pref;
    if ~isfield(handles, 'PSI_anal')
        return;
    end
    PSI = handles.PSI_anal;
    t = handles.t_anal;
    k = handles.k_anal;
    if strcmp(handles.analFourierPlotMode, 'lines'); % Axes are in density plot mode
        fourierPlot(PSI, t, k, pref.fourierLines, pref.aLMult, handles.analInvAxes, 'density');
        handles.analFourierPlotMode = 'density';
    else
        fourierPlot(PSI, t, k, pref.fourierLines, pref.aLMult, handles.analInvAxes, 'lines');
        handles.analFourierPlotMode = 'lines';
    end
    title('Analytical');
end

function maximaNum_Callback(hObject,evendata)        %#ok<INUSD>
    if isfield(handles, 'PSI_num')
        maximaDisplay(handles.PSI_num, handles.x_num, handles.t_num);
    else
        uiwait(warndlg('No numerical data exists in memory. Cannot compute maxima.'))
    end
end

function energyNum_Callback(hObject,evendata)              %#ok<INUSD>
    g = str2double(handles.potEdit.String);
    Nx = str2double(handles.NtEdit.String);
    dt = str2double(handles.dxEdit.String);
    if isfield(handles, 'PSI_num')
        [dE, E, ke, pe] = energy(handles.PSI_num, handles.t_num, handles.k_num.^2, Nx, g, dt);
    else
        uiwait(warndlg('No numerical data exists in memory. Cannot compute energy.'))
        return;
    end
    figure;
    plot(handles.t_num, dE, 'LineWidth', 1.5); title('dE'); title('Integrated Energy Error');
    xlabel('t'); ylabel('dE'); grid on;

    figure;
    plot(handles.t_num, E, 'LineWidth', 1.5); title('Energy');
    hold on;
    plot(handles.t_num, ke, 'LineWidth', 1.5);  
    hold on;
    plot(handles.t_num, pe, 'LineWidth', 1.5);
    legend('E', 'T', 'V', 'Location', 'Best');
    xlabel('t'); ylabel('E'); grid on;
end

function maximaDT_Callback(hObject,evendata)       %#ok<INUSD>
    if isfield(handles, 'PSI_anal')
        maximaDisplay(handles.PSI_anal, handles.x_anal, handles.t_anal);
    else
        uiwait(warndlg('No DT data exists in memory. Cannot compute maxima.'))
    end
end

function LRadioButton_Callback(hObject,evendata)           %#ok<INUSD>
    set(handles.LEdit, 'Enable', 'on')
    set(handles.aLMultEdit, 'Enable', 'off')
end

function aRadioButton_Callback(hObject,evendata)           %#ok<INUSD>
    set(handles.LEdit, 'Enable', 'off')
    set(handles.aLMultEdit, 'Enable', 'on')
end

function approxAjCheck_Callback(hObject,evendata)          %#ok<INUSD>
    if hObject.Value == 1
        handles.decimalsEdit.Enable = 'on';
    else
        handles.decimalsEdit.Enable = 'off';
    end
end

function psi0Listbox_Callback(hObject,evendata)            %#ok<INUSD>
    selection=hObject.Value;

    if (selection ~= 2)
        handles.approxAjCheck.Visible = 'off';
        handles.decimalsEdit.Visible = 'off';
    end

    if (selection ~= 3)
        handles.aManABLabel_lx.Visible = 'off';
        handles.aManABEdit.Visible = 'off';
    end

    if (selection ~= 5 || selection ~= 4)
        handles.nHermBesLabel_lx.Visible = 'off';
        handles.sHermBesLabel_lx.Visible = 'off';
        handles.nHermBesEdit.Visible = 'off';
        handles.sHermBesEdit.Visible = 'off';
    end

    if (selection ~= 6)
        handles.aAiryLabel_lx.Visible = 'off';
        handles.aAiryEdit.Visible = 'off';
    end

    if (selection == 1)
        handles.psi0EqLabel_lx.String = '$\psi_0 = DT(x=X,t)$';

    elseif (selection == 2) 
        handles.psi0EqLabel_lx.String = '$\psi_0=A_0+2\sum_m^M A_m\cos(m\Omega x)$';
        handles.approxAjCheck.Visible = 'on';
        handles.decimalsEdit.Visible = 'on';

    elseif (selection == 3) 
        handles.aManABLabel_lx.Visible = 'on';
        handles.aManABEdit.Visible = 'on';
        handles.psi0EqLabel_lx.String = '$\psi_0=A_0+2\sum_m^M A_m\cos(m\Omega x)$';

    elseif (selection == 4) % Hermite
        handles.nHermBesLabel_lx.Visible = 'on';
        handles.sHermBesLabel_lx.Visible = 'on';
        handles.nHermBesEdit.Visible = 'on';
        handles.sHermBesEdit.Visible = 'on';       
        handles.psi0EqLabel_lx.String = '$\psi_0=\exp(-x^2/2s^2)H_n(x/s)$';

    elseif (selection == 5) % Bessel
        handles.nHermBesLabel_lx.Visible = 'on';
        handles.sHermBesLabel_lx.Visible = 'on';
        handles.nHermBesEdit.Visible = 'on';
        handles.sHermBesEdit.Visible = 'on';       
        handles.psi0EqLabel_lx.String = '$\psi_0=\exp(-x^2/2s^2)J_n(x)$';

    elseif (selection == 6) 
        handles.aAiryLabel_lx.Visible = 'on';
        handles.aAiryEdit.Visible = 'on';      
        handles.psi0EqLabel_lx.String = '$\psi_0=\exp(ax)Ai(x)$';
    end

end

function potMenu_Callback(hObject,evendata)                %#ok<INUSD>
    str = hObject.String;
    val = hObject.Value;
    switch str{val};
    case 'g*|psi|^2 (cubic)' % User selects peaks.
        handles.potEdit.String = num2str(-1);
    case 'alpha*x^2 (parabolic)' % User selects membrane.
        handles.potEdit.String = num2str(0.3);
    end
end

function seedMenu_Callback(hObject,evendata)               %#ok<INUSD>
    str = hObject.String;
    val = hObject.Value;
    seed = str{val};
    switch lower(seed)
        case {'breather', 'soliton'}
            handles.kEllipEdit.Enable = 'off';
        case {'cn', 'dn'}
            handles.kEllipEdit.Enable = 'on';
        otherwise
            error('Unknown Seed.');
    end
end

function runDTButton_Callback(hObject,evendata)            %#ok<INUSD>
    disp('Calculating DT:');
    order =  str2double(handles.orderEdit.String);
    a = eval(handles.aEdit.String); 
    L = pi/sqrt(1-2*a(1));                        %#ok<NASGU> % Read length L (will be used in shifts)    
    lambda = sqrt(8*a(1)*(1-2*a(1)));             %#ok<NASGU> % Growth factor (used in shifts)
    Omega = 2*sqrt(1-2*a(1));                     %#ok<NASGU> % Fundamental wavenumber (used in shifts)  
    xj = eval(handles.tjEdit.String); % Note that the handles are flipped
    tj = eval(handles.xjEdit.String);
    T = str2double(handles.xmaxEdit.String);
    R = eval(handles.ratioEdit.String);
    g = eval(handles.kEllipEdit.String);
    pref = handles.pref;
    str = get(handles.seedMenu, 'String');
    val = get(handles.seedMenu,'Value');
    seed = str{val};
    [PSI, x, t] = calcDarboux(order, a, R, T, g, seed, xj, tj, pref.Nx, pref.Nt, pref.Lmode, pref.L, pref.aLMult);  % FIX PLEASE

    peak = peakPredict(a, order, R, seed, g);
    handles.phfResultLabel.String = num2str(abs(peak).^pref.pwr);

    nlsePlot(abs(PSI).^pref.pwr, x, t, ceil(pref.Nt/500), ceil(pref.Nx/1000), handles.analRealAxes, pref.plotType);
    %k = 2*(-pref.Nx/2:1:pref.Nx/2-1)'*pi/2/max(x);          % Wave number
    k = (-pref.Nx/2:pref.Nx/2-1);
    fourierPlot(PSI, t, k, pref.fourierLines, pref.aLMult, handles.analInvAxes, pref.fourierPlotType);

    axes(handles.analRealAxes); title(sprintf('Analytical. Max = %.5f', max(max(abs(PSI).^pref.pwr))));
    axes(handles.analInvAxes); title('Analytical');

    handles.analPlotMode = pref.plotType;
    handles.analFourierPlotMode = pref.fourierPlotType;
    handles.PSI_anal = PSI;                                 % Save result to handles struct
    handles.x_anal = x;
    handles.t_anal = t;
    handles.order = order;
    handles.k_anal = k;
    disp('Done');
    %sound(handles.y);
end

function runButton_Callback(hObject,evendata)              %#ok<INUSD>
    dt = str2double(handles.dxEdit.String);            % Read dt from edit
    Nx =  str2double(handles.NtEdit.String);           % read Nx from edit
    Tmax = str2double(handles.xfEdit.String);          % Read Tmax from edit
    Nt = Tmax/dt;                                      % Calculate Nt
    mult = str2double(handles.aLMultEdit.String);      % Read mult from edit box
    R = eval(handles.ratioEdit.String);
    a = eval(handles.aEdit.String); 

    if strcmp(handles.LEdit.Enable, 'on')
        mode = 'manual';
        L = str2double(handles.LEdit.String);
    else
        mode = 'periodic';
        [~, D] = rat(R);
        if ~imag(a) % If parameter 'a' is used.
            aa = a(1); 
        else % Otherwise, complex eigenvalue form is assumed
            aa = imag(a(1))^2/2; % Calculate parameter 'a' from 'l'
        end  
        disp(aa);
        L = D*mult*pi/sqrt(1-2*aa);     % Periodic length
        Omega = 2*sqrt(1-2*aa);      % Principal wave number
    end

    xj = eval(handles.tjEdit.String); % Note that the handles are flipped
    tj = eval(handles.xjEdit.String);

    dx = L/Nx;                             % Spatial step size
    x = (-Nx/2:1:Nx/2-1)'*dx;

    % Determine the selected data set.
    str = get(handles.potMenu, 'String');
    val = get(handles.potMenu,'Value');
    % Set current data to the selected data set.
    switch str{val}
        case 'g*|psi|^2 (cubic)' % Cubic NLSE
            g = str2double(handles.potEdit.String);
            V = @(psi, x) (g*abs(psi).^2);
        case 'alpha*x^2 (parabolic)' % Parabolic SE
            alpha = str2double(handles.potEdit.String);
            V = @(psi, x) 1/2*alpha*x.^2;
    end

    psi0_selection = handles.psi0Listbox.Value;

    if (psi0_selection == 1) % Pure DT
        order =  str2double(handles.orderEdit.String);
        T = str2double(handles.xmaxEdit.String);
        R = eval(handles.ratioEdit.String);
        g = eval(handles.kEllipEdit.String);
        str = get(handles.seedMenu, 'String');
        val = get(handles.seedMenu,'Value');
        seed = str{val};
        [psi_0, ~, ~, L] = calcDarboux(order, a, R, T, g, seed, xj, tj, Nx, 0, mode, L, mult);
        psi_0 = psi_0.';

    elseif (psi0_selection == 2) % THIS SHOULD BE MOVED TO GEN COEFF!!!
        order =  str2double(handles.orderEdit.String);
        T = str2double(handles.xmaxEdit.String);
        R = eval(handles.ratioEdit.String);
        g = eval(handles.kEllipEdit.String);
        str = get(handles.seedMenu, 'String');
        val = get(handles.seedMenu,'Value');
        seed = str{val};
        [psi_dt, x_dt, ~] = calcDarboux(order, a, R, T, g, seed, xj, tj, Nx, 0, 'periodic', 0, mult);
        if length(R) == 1 && R == 2
            R = 1:order;
        else
            R = [1, R];
        end
        [A0, A] = genCoeff(x_dt, psi_dt, a, order, R, 0, 6969, handles.approxAjCheck.Value);

        psi_0 = A0;
        for i=1:order
            psi_0 = psi_0 + 2*A(i)*cos(R(i)*Omega*x);
        end
    %         norm = dx*(psi_0')*(psi_0)/L;
    %         disp(['Norm is: ', num2str(norm)]);
        handles.coeffTable.Data = [A0, A].';

    elseif (psi0_selection == 3)

        A = handles.coeffTable.Data;
        if iscell(A)
            for i = 1:length(A)
                if isempty(A{i})
                    B(i) = 0;
                else
                    B(i) = A{i};
                end
            end
            A = B.';
        end
        A = A(2:end);

        A02 = 1;
        for i = 1:length(A)
            A02 = A02 - 2*abs(A(i))^2;
        end
        A0 = sqrt(A02);

        psi_0 = A0;
        for i=1:length(A)
            %psi_0 = psi_0 + 2*A(i)*cos(R(i)*Omega*x);
            psi_0 = psi_0 + 2*A(i)*cos(i*Omega*x);
        end
        handles.coeffTable.Data = [A0; A];
    elseif (psi0_selection == 4)
        s = str2double(handles.sHermBesEdit.String);
        n = str2double(handles.nHermBesEdit.String);
        psi_0 = exp(-x.^2/2/s^2).*hermiteH(n, x/s);
    elseif (psi0_selection == 5)
        s = str2double(handles.sHermBesEdit.String);
        n = str2double(handles.nHermBesEdit.String);
        psi_0 = exp(-x.^2/2/s^2).*besselj(n, x);
    elseif (psi0_selection == 6)
        a = str2double(handles.aAiryEdit.String);
        psi_0 = exp(a*x).*airy(x);
    end

    orderSelection = handles.algBox.Value;
    if orderSelection == 1
        method = 'T1';
    elseif orderSelection == 2
        method = 'T2';
    elseif orderSelection == 3
        method = 'T4S';
    elseif orderSelection == 4
        method = 'T4M';
    elseif orderSelection == 5
        method = 'T6S';
    elseif orderSelection == 6
        method = 'TM';
    elseif orderSelection == 7
        method = 'T8S';    
    elseif orderSelection == 8
        method = 'T8M';
    end
    [PSI, x, t, k] = solve(dt, Nx, Tmax, L, mult, V, psi_0, method); 
    handles.k_num = k;

    %    initialPlot(PSI(1, :), x, handles.axes1);
    pref = handles.pref;
    nlsePlot(abs(PSI).^pref.pwr, x, t, ceil(Nt/500), ceil(Nx/500), handles.numRealAxes, pref.plotType);
    k = (-Nx/2:Nx/2-1);
    fourierPlot(PSI, t, k, pref.fourierLines, pref.aLMult, handles.numInvAxes, pref.fourierPlotType);

    axes(handles.numRealAxes); title(sprintf('Numerical. Max = %.3f', max(max(abs(PSI).^pref.pwr))));
    axes(handles.numInvAxes); title('Numerical'); 
    handles.PSI_num = PSI;           % Save result to handles structure.
    handles.x_num = x;
    handles.t_num = t;
    handles.numPlotMode = pref.plotType;
    handles.numFourierPlotMode = pref.fourierPlotType;

    handles.SpectrumPubMode = 0;
    handles.IntensityPubMode = 0;

end

end
